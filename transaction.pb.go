// Code generated by protoc-gen-go. DO NOT EDIT.
// source: transaction.proto

/*
Package opentransaction is a generated protocol buffer package.

It is generated from these files:
	transaction.proto

It has these top-level messages:
	TenantID
	Transaction
	Metadata
	Empty
*/
package opentransaction

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TenantID struct {
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *TenantID) Reset()                    { *m = TenantID{} }
func (m *TenantID) String() string            { return proto.CompactTextString(m) }
func (*TenantID) ProtoMessage()               {}
func (*TenantID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TenantID) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type Transaction struct {
	ID                string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	OriginTenant      string `protobuf:"bytes,2,opt,name=origin_tenant,json=originTenant" json:"origin_tenant,omitempty"`
	DestinationTenant string `protobuf:"bytes,3,opt,name=destination_tenant,json=destinationTenant" json:"destination_tenant,omitempty"`
	FromRef           string `protobuf:"bytes,4,opt,name=from_ref,json=fromRef" json:"from_ref,omitempty"`
	ToRef             string `protobuf:"bytes,5,opt,name=to_ref,json=toRef" json:"to_ref,omitempty"`
	Value             int64  `protobuf:"varint,6,opt,name=value" json:"value,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Transaction) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Transaction) GetOriginTenant() string {
	if m != nil {
		return m.OriginTenant
	}
	return ""
}

func (m *Transaction) GetDestinationTenant() string {
	if m != nil {
		return m.DestinationTenant
	}
	return ""
}

func (m *Transaction) GetFromRef() string {
	if m != nil {
		return m.FromRef
	}
	return ""
}

func (m *Transaction) GetToRef() string {
	if m != nil {
		return m.ToRef
	}
	return ""
}

func (m *Transaction) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Metadata struct {
	Context map[string]string `protobuf:"bytes,1,rep,name=context" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Metadata) Reset()                    { *m = Metadata{} }
func (m *Metadata) String() string            { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()               {}
func (*Metadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Metadata) GetContext() map[string]string {
	if m != nil {
		return m.Context
	}
	return nil
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*TenantID)(nil), "opentransaction.TenantID")
	proto.RegisterType((*Transaction)(nil), "opentransaction.Transaction")
	proto.RegisterType((*Metadata)(nil), "opentransaction.Metadata")
	proto.RegisterType((*Empty)(nil), "opentransaction.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Tenant service

type TenantClient interface {
	ID(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TenantID, error)
	Accept(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Metadata, error)
	AcceptRequest(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Metadata, error)
	Revert(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Metadata, error)
}

type tenantClient struct {
	cc *grpc.ClientConn
}

func NewTenantClient(cc *grpc.ClientConn) TenantClient {
	return &tenantClient{cc}
}

func (c *tenantClient) ID(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TenantID, error) {
	out := new(TenantID)
	err := grpc.Invoke(ctx, "/opentransaction.Tenant/ID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantClient) Accept(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Metadata, error) {
	out := new(Metadata)
	err := grpc.Invoke(ctx, "/opentransaction.Tenant/Accept", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantClient) AcceptRequest(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Metadata, error) {
	out := new(Metadata)
	err := grpc.Invoke(ctx, "/opentransaction.Tenant/AcceptRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantClient) Revert(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Metadata, error) {
	out := new(Metadata)
	err := grpc.Invoke(ctx, "/opentransaction.Tenant/Revert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Tenant service

type TenantServer interface {
	ID(context.Context, *Empty) (*TenantID, error)
	Accept(context.Context, *Transaction) (*Metadata, error)
	AcceptRequest(context.Context, *Transaction) (*Metadata, error)
	Revert(context.Context, *Transaction) (*Metadata, error)
}

func RegisterTenantServer(s *grpc.Server, srv TenantServer) {
	s.RegisterService(&_Tenant_serviceDesc, srv)
}

func _Tenant_ID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServer).ID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opentransaction.Tenant/ID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServer).ID(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenant_Accept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServer).Accept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opentransaction.Tenant/Accept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServer).Accept(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenant_AcceptRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServer).AcceptRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opentransaction.Tenant/AcceptRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServer).AcceptRequest(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenant_Revert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServer).Revert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opentransaction.Tenant/Revert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServer).Revert(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tenant_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opentransaction.Tenant",
	HandlerType: (*TenantServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ID",
			Handler:    _Tenant_ID_Handler,
		},
		{
			MethodName: "Accept",
			Handler:    _Tenant_Accept_Handler,
		},
		{
			MethodName: "AcceptRequest",
			Handler:    _Tenant_AcceptRequest_Handler,
		},
		{
			MethodName: "Revert",
			Handler:    _Tenant_Revert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transaction.proto",
}

func init() { proto.RegisterFile("transaction.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 341 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0xc1, 0x4e, 0xea, 0x40,
	0x14, 0x86, 0x99, 0xf6, 0xb6, 0x70, 0x0f, 0x70, 0xaf, 0x4c, 0xd4, 0x14, 0xe2, 0x82, 0xd4, 0xc4,
	0xb0, 0xb1, 0x0b, 0xdc, 0x28, 0x2b, 0x0d, 0xb0, 0xc0, 0xc4, 0x4d, 0xc3, 0x9e, 0x8c, 0xe5, 0x60,
	0x1a, 0x65, 0xa6, 0x0e, 0x07, 0x22, 0x6f, 0xe0, 0x2b, 0xf8, 0x28, 0xbe, 0x9d, 0xe9, 0x0c, 0x0d,
	0x04, 0xdc, 0xb1, 0x9b, 0xf3, 0xff, 0x5f, 0xff, 0xcc, 0xf9, 0x3b, 0xd0, 0x20, 0x2d, 0xe4, 0x42,
	0x24, 0x94, 0x2a, 0x19, 0x65, 0x5a, 0x91, 0xe2, 0xff, 0x55, 0x86, 0x72, 0x47, 0x0e, 0x5b, 0x50,
	0x19, 0xa3, 0x14, 0x92, 0x46, 0x03, 0xfe, 0x0f, 0x9c, 0xd1, 0x20, 0x60, 0x6d, 0xd6, 0xf9, 0x1b,
	0x3b, 0xa3, 0x41, 0xf8, 0xcd, 0xa0, 0x3a, 0xde, 0xb2, 0xfb, 0x3e, 0xbf, 0x84, 0xba, 0xd2, 0xe9,
	0x4b, 0x2a, 0x27, 0x64, 0x22, 0x02, 0xc7, 0x58, 0x35, 0x2b, 0xda, 0x58, 0x7e, 0x0d, 0x7c, 0x8a,
	0x0b, 0x4a, 0xa5, 0xc8, 0x33, 0x0a, 0xd2, 0x35, 0x64, 0x63, 0xc7, 0xd9, 0xe0, 0x4d, 0xa8, 0xcc,
	0xb4, 0x9a, 0x4f, 0x34, 0xce, 0x82, 0x3f, 0x06, 0x2a, 0xe7, 0x73, 0x8c, 0x33, 0x7e, 0x06, 0x3e,
	0x29, 0x63, 0x78, 0xc6, 0xf0, 0x48, 0xe5, 0xf2, 0x29, 0x78, 0x2b, 0xf1, 0xb6, 0xc4, 0xc0, 0x6f,
	0xb3, 0x8e, 0x1b, 0xdb, 0x21, 0xfc, 0x64, 0x50, 0x79, 0x42, 0x12, 0x53, 0x41, 0x82, 0xdf, 0x43,
	0x39, 0x51, 0x92, 0xf0, 0x83, 0x02, 0xd6, 0x76, 0x3b, 0xd5, 0xee, 0x55, 0xb4, 0xd7, 0x43, 0x54,
	0xb0, 0x51, 0xdf, 0x82, 0x43, 0x49, 0x7a, 0x1d, 0x17, 0x9f, 0xb5, 0x7a, 0x50, 0xdb, 0x35, 0xf8,
	0x09, 0xb8, 0xaf, 0xb8, 0xde, 0x74, 0x91, 0x1f, 0xb7, 0xd7, 0xb0, 0x25, 0xd8, 0xa1, 0xe7, 0xdc,
	0xb2, 0xb0, 0x0c, 0xde, 0x70, 0x9e, 0xd1, 0xba, 0xfb, 0xe5, 0x80, 0xbf, 0x59, 0xf3, 0x2e, 0xaf,
	0x92, 0x9f, 0x1f, 0x5c, 0xc3, 0x80, 0xad, 0xe6, 0x81, 0x5e, 0xfc, 0xa3, 0xb0, 0xc4, 0xfb, 0xe0,
	0x3f, 0x24, 0x09, 0x66, 0xc4, 0x2f, 0x0e, 0xb1, 0xed, 0xf9, 0x97, 0x90, 0x62, 0xc7, 0xb0, 0xc4,
	0x1f, 0xa1, 0x6e, 0x43, 0x62, 0x7c, 0x5f, 0xe2, 0xe2, 0xa8, 0xac, 0x3e, 0xf8, 0x31, 0xae, 0x50,
	0x1f, 0x13, 0xf2, 0xec, 0x9b, 0xf7, 0x79, 0xf3, 0x13, 0x00, 0x00, 0xff, 0xff, 0x30, 0xc9, 0x7b,
	0x08, 0xb4, 0x02, 0x00, 0x00,
}
